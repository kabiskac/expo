{"version":3,"file":"GeolocationPolyfill.js","sourceRoot":"","sources":["../src/GeolocationPolyfill.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAkB,gBAAgB,EAAmB,MAAM,kBAAkB,CAAC;AACrF,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAS3D,cAAc;AACd;;GAEG;AACH,MAAM,UAAU,6BAA6B;IAC3C,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,aAAa;QACb,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG;YAC7B,kBAAkB;YAClB,aAAa;YACb,UAAU;YAEV,kGAAkG;YAClG,uBAAuB;YACvB,aAAa,EAAE,GAAG,EAAE,GAAE,CAAC;SACxB,CAAC;KACH;AACH,CAAC;AAED,SAAS,yBAAyB,CAAC,OAA2B;IAC5D,OAAO;QACL,QAAQ,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ;KACzF,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CACzB,OAAmC,EACnC,QAAkC,GAAG,EAAE,GAAE,CAAC,EAC1C,UAA8B,EAAE;IAEhC,+BAA+B,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AAC3D,CAAC;AAED,mGAAmG;AACnG,0DAA0D;AAC1D,KAAK,UAAU,+BAA+B,CAC5C,OAAmC,EACnC,KAA+B,EAC/B,OAA2B;IAE3B,IAAI;QACF,MAAM,YAAY,CAAC,uBAAuB,EAAE,CAAC;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9F,OAAO,CAAC,MAAM,CAAC,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACV,KAAK,CAAC,CAAC,CAAC,CAAC;KACV;AACH,CAAC;AAED,gDAAgD;AAChD,SAAS,aAAa,CACpB,OAAmC,EACnC,KAA+B,EAC/B,OAA2B;IAE3B,MAAM,OAAO,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAE7D,YAAY,CAAC,sBAAsB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;QAClE,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC/C,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,6CAA6C;AAC7C,SAAS,UAAU,CAAC,OAAe;IACjC,kBAAkB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import { Platform } from 'expo-modules-core';\r\n\r\nimport ExpoLocation from './ExpoLocation';\r\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\r\nimport { LocationSubscriber } from './LocationSubscribers';\r\n\r\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\r\ntype GeolocationErrorCallback = (error: any) => void;\r\n\r\ntype GeolocationOptions = {\r\n  enableHighAccuracy?: boolean;\r\n};\r\n\r\n// @needsAudit\r\n/**\r\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\r\n */\r\nexport function installWebGeolocationPolyfill(): void {\r\n  if (Platform.OS !== 'web') {\r\n    // @ts-ignore\r\n    window.navigator.geolocation = {\r\n      getCurrentPosition,\r\n      watchPosition,\r\n      clearWatch,\r\n\r\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\r\n      // in react-native docs\r\n      stopObserving: () => {},\r\n    };\r\n  }\r\n}\r\n\r\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\r\n  return {\r\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\r\n  };\r\n}\r\n\r\nfunction getCurrentPosition(\r\n  success: GeolocationSuccessCallback,\r\n  error: GeolocationErrorCallback = () => {},\r\n  options: GeolocationOptions = {}\r\n): void {\r\n  _getCurrentPositionAsyncWrapper(success, error, options);\r\n}\r\n\r\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\r\n// using async/await for the internal implementation of it\r\nasync function _getCurrentPositionAsyncWrapper(\r\n  success: GeolocationSuccessCallback,\r\n  error: GeolocationErrorCallback,\r\n  options: GeolocationOptions\r\n): Promise<any> {\r\n  try {\r\n    await ExpoLocation.requestPermissionsAsync();\r\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\r\n    success(result);\r\n  } catch (e) {\r\n    error(e);\r\n  }\r\n}\r\n\r\n// Polyfill: navigator.geolocation.watchPosition\r\nfunction watchPosition(\r\n  success: GeolocationSuccessCallback,\r\n  error: GeolocationErrorCallback,\r\n  options: GeolocationOptions\r\n) {\r\n  const watchId = LocationSubscriber.registerCallback(success);\r\n\r\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\r\n    LocationSubscriber.unregisterCallback(watchId);\r\n    error({ watchId, message: err.message, code: err.code });\r\n  });\r\n\r\n  return watchId;\r\n}\r\n\r\n// Polyfill: navigator.geolocation.clearWatch\r\nfunction clearWatch(watchId: number) {\r\n  LocationSubscriber.unregisterCallback(watchId);\r\n}\r\n"]}
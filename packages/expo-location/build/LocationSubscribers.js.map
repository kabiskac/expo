{"version":3,"file":"LocationSubscribers.js","sourceRoot":"","sources":["../src/LocationSubscribers.ts"],"names":[],"mappings":"AAEA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAO9D,IAAI,WAAW,GAAG,CAAC,CAAC;AAEpB,MAAM,UAAU;IACN,SAAS,CAAS;IAClB,cAAc,CAAS;IACvB,SAAS,GAAmC,EAAE,CAAC;IAC/C,iBAAiB,GAAwB,IAAI,CAAC;IAEtD,YAAY,SAAiB,EAAE,cAAsB;QACnD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAED,2BAA2B;QACzB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,OAAO;SACR;QACD,IAAI,CAAC,iBAAiB,GAAG,oBAAoB,CAAC,WAAW,CACvD,IAAI,CAAC,SAAS,EACd,CAAC,KAAkB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAC5C,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,QAAsB;QACrC,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACnC,MAAM,EAAE,GAAG,EAAE,WAAW,CAAC;QACzB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;QAC9B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,EAAU;QAC3B,2DAA2D;QAC3D,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;YACvB,OAAO;SACR;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAC1B,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAElC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACtE,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAChE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SAC/B;IACH,CAAC;IAED,OAAO,CAAC,KAAkB;QACxB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAEzC,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;SACtC;aAAM;YACL,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;SACxC;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,IAAI,UAAU,CAC9C,sBAAsB,EACtB,UAAU,CACX,CAAC;AACF,MAAM,CAAC,MAAM,iBAAiB,GAAG,IAAI,UAAU,CAC7C,qBAAqB,EACrB,SAAS,CACV,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,kBAAkB;IAChC,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["import { Subscription } from 'expo-modules-core';\r\n\r\nimport ExpoLocation from './ExpoLocation';\r\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\r\nimport { LocationEventEmitter } from './LocationEventEmitter';\r\n\r\ntype EventObject = {\r\n  watchId: number;\r\n  [key: string]: any;\r\n};\r\n\r\nlet nextWatchId = 0;\r\n\r\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\r\n  private eventName: string;\r\n  private eventDataField: string;\r\n  private callbacks: { [id: string]: CallbackType } = {};\r\n  private eventSubscription: Subscription | null = null;\r\n\r\n  constructor(eventName: string, eventDataField: string) {\r\n    this.eventName = eventName;\r\n    this.eventDataField = eventDataField;\r\n  }\r\n\r\n  maybeInitializeSubscription() {\r\n    if (this.eventSubscription) {\r\n      return;\r\n    }\r\n    this.eventSubscription = LocationEventEmitter.addListener(\r\n      this.eventName,\r\n      (event: EventObject) => this.trigger(event)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Registers given callback under new id which is then returned.\r\n   */\r\n  registerCallback(callback: CallbackType): number {\r\n    this.maybeInitializeSubscription();\r\n    const id = ++nextWatchId;\r\n    this.callbacks[id] = callback;\r\n    return id;\r\n  }\r\n\r\n  /**\r\n   * Unregisters a callback with given id and revokes the subscription if possible.\r\n   */\r\n  unregisterCallback(id: number): void {\r\n    // Do nothing if we have already unregistered the callback.\r\n    if (!this.callbacks[id]) {\r\n      return;\r\n    }\r\n\r\n    delete this.callbacks[id];\r\n    ExpoLocation.removeWatchAsync(id);\r\n\r\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\r\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\r\n      this.eventSubscription = null;\r\n    }\r\n  }\r\n\r\n  trigger(event: EventObject): void {\r\n    const watchId = event.watchId;\r\n    const callback = this.callbacks[watchId];\r\n\r\n    if (callback) {\r\n      callback(event[this.eventDataField]);\r\n    } else {\r\n      ExpoLocation.removeWatchAsync(watchId);\r\n    }\r\n  }\r\n}\r\n\r\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\r\n  'Expo.locationChanged',\r\n  'location'\r\n);\r\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\r\n  'Expo.headingChanged',\r\n  'heading'\r\n);\r\n\r\n/**\r\n * @private Necessary for some unit tests.\r\n */\r\nexport function _getCurrentWatchId(): number {\r\n  return nextWatchId;\r\n}\r\n"]}